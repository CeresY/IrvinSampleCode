<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       					http://www.springframework.org/schema/beans/spring-beans.xsd
       					http://www.springframework.org/schema/context 
       					http://www.springframework.org/schema/context/spring-context.xsd 
       					http://www.springframework.org/schema/util 
       					http://www.springframework.org/schema/util/spring-util.xsd
       					http://www.springframework.org/schema/cache
        				http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">

	<context:property-placeholder location="classpath:cache/redis.properties" />
	
	<!-- 加载属性配置文件-密码加密时候使用 
		locations参数来自：org.springframework.core.io.support.PropertiesLoaderSupport
    <bean id="propertyConfig" class="util.PropertyPlaceholderConfigurerExt"> 
	    <property name="locations"> 
            <list> 
                <value>classpath:cache/redis.properties</value>
            </list> 
	    </property> 
    </bean>
	--> 
	
	<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
	       <property name="caches">
	              <set>
	                     <bean class="web.redis.RedisCache">
	                            <property name="redisTemplate" ref="redisTemplate" />
	                            <property name="setOps" ref="redisTemplate"/>
	                            <property name="hashOps" ref="redisTemplate"/>
	                            <property name="name" value="default"/>
	                     </bean>
	                     <bean class="web.redis.RedisCache">
	                            <property name="redisTemplate" ref="redisTemplate" />
	                            <property name="setOps" ref="redisTemplate"/>
	                            <property name="hashOps" ref="redisTemplate"/>
	                            <property name="name" value="commonCache"/>
	                     </bean>
	              </set>
	       </property>
	</bean>
	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <property name="softMinEvictableIdleTimeMillis" value="10000" />
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <property name="testWhileIdle" value="${redis.testWhileIdle}"/>
        <property name="testOnReturn" value="false"/>
        <property name="jmxEnabled" value="true"/>
        <property name="jmxNamePrefix" value="myJedisPoolCfg"/>
        <property name="blockWhenExhausted" value="false"/>
    </bean>
	     
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"/>
		<property name="port" value="${redis.port}"/>
		<property name="poolConfig" ref="jedisPoolConfig"/>
	</bean>
	
	<bean id="redisTemplateDefault" class="org.springframework.data.redis.core.StringRedisTemplate">
	       <property name="connectionFactory"   ref="connectionFactory" />
	</bean>
	
	<!--redis操作模版,使用该对象可以操作redis  -->  
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>    
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->    
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>    
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>

	<!--自定义redis工具类,在需要缓存的地方注入此类  -->
    <bean id="redisTemplateUtil" class="web.redis.RedisTemplateUtil">
    	<property name="redisTemplate" ref="redisTemplate"/>
    </bean>
</beans>

<!-- 
<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
            p:hostName="${redis.host}" 
            p:port="${redis.port}" 
            p:password="${redis.pass}" 
            p:poolConfig-ref="poolConfig"/>
 -->